# -*- coding: utf-8 -*-
"""dense_optical.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16NfxCtzSCyWHHKF9rSOOBTTYsJY2etMV
"""

import cv2
import numpy as np

def dense_optical(method, video_path, params=[], to_gray=False):
  # read the video
  cap = cv2.VideoCapture(video_path)

  # read the first frame
  ret, old_frame = cap.read()

  # create HSV and make value a constant
  hsv = np.zeros_like(old_frame)
  hsv[...,1] = 255

  # preprocessing for extract method
  if to_gray:
    old_frame = cv2.cvtColor(old_frame, cv2.COLOR_BGR2GRAY)
  
  frame_width = int(cap.get(3))
  frame_height = int(cap.get(4))

  size = (frame_width, frame_height)

  name = f'{video_path}'.split('/')[-1].split('.')[-2]+'_denseout.avi'

  # initilize the video codec
  result = cv2.VideoWriter(name,  
                         cv2.VideoWriter_fourcc(*'MJPG'), 
                         10, size) 
  
  while True:
    ret, new_frame = cap.read()
    if not ret:
      break
    # Preprocessing for exact method
    if to_gray:
      new_frame = cv2.cvtColor(new_frame, cv2.COLOR_BGR2GRAY)
    
    # Calculate Optical Flow
    flow = method(old_frame, new_frame, None, *params)

    # Encoding: convert the algorithm's output into Polar coordinates
    mag, ang = cv2.cartToPolar(flow[..., 0], flow[..., 1])
        
    # Use Hue and Saturation to encode the Optical Flow
    hsv[..., 0] = ang * 180 / np.pi / 2
    hsv[..., 2] = cv2.normalize(mag, None, 0, 255, cv2.NORM_MINMAX)
        
    # Convert HSV image into BGR for demo
    bgr = cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)
    result.write(bgr)